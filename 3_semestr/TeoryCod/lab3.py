import cv2
import matplotlib.pyplot as plt
import numpy as np
import struct
import ast

origin_img = 'temporary_files/img.bmp'
origin_24_img ='temporary_files/pic1.bmp'

def Compress(uncompressed):
    """Сжатие полученной строки в список символов и их кода."""

    # Создание словаря.
    dict_size = 256
    dictionary = {chr(i): chr(i) for i in range(dict_size)}

    w = ""
    result = []
    for c in uncompressed:
        wc = w + c
        if wc in dictionary:
            w = wc
        else:
            result.append(dictionary[w])
            # Добавление wc в словарь.
            dictionary[wc] = dict_size
            dict_size += 1
            w = c

    # Вывод кода для w.
    if w:
        result.append(dictionary[w])
    return result

def decompress(compressed):
    """Распоковка списка входных ks в строку"""

    # Создание словаря 
    dict_size = 256
    dictionary = {chr(i): chr(i) for i in range(dict_size)}

    w = result = compressed.pop(0)
    for k in compressed:
        if k in dictionary:
            entry = dictionary[k]
        elif k == dict_size:
            entry = w + w[0]
        else:
            raise ValueError('Ошибка копмпресски k: %s' % k)
        result += entry

        # Добавление w+entry[0] в словарь.
        dictionary[dict_size] = w + entry[0]
        dict_size += 1

        w = entry
    return result

def BITMAPINFOHEADER(fn):
    # BITMAPINFOHEADER
    bmp = open(fn, 'rb')
    type = bmp.read(2).decode()
    print('Type:', type)
    print('Size: %s' % struct.unpack('I', bmp.read(4)))
    print('Reserved 1: %s' % struct.unpack('H', bmp.read(2)))
    print('Reserved 2: %s' % struct.unpack('H', bmp.read(2)))
    print('Offset: %s' % struct.unpack('I', bmp.read(4)))
    print('DIB Header Size: %s' % struct.unpack('I', bmp.read(4)))
    print('Width: %s' % struct.unpack('I', bmp.read(4)))
    print('Height: %s' % struct.unpack('I', bmp.read(4)))
    print('Colour Planes: %s' % struct.unpack('H', bmp.read(2)))
    print('Bits per Pixel: %s' % struct.unpack('H', bmp.read(2)))
    print('Compression Method: %s' % struct.unpack('I', bmp.read(4)))
    print('Raw Image Size: %s' % struct.unpack('I', bmp.read(4)))
    print('Horizontal Resolution: %s' % struct.unpack('I', bmp.read(4)))
    print('Vertical Resolution: %s' % struct.unpack('I', bmp.read(4)))
    print('Number of Colours: %s' % struct.unpack('I', bmp.read(4)))
    print('Important Colours: %s' % struct.unpack('I', bmp.read(4)))
    bmp.close()

# BITMAPINFOHEADER(origin_24_img)

# -*- coding: utf-8 -*-
# Form implementation generated from reading ui file 'pic_gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    
    origin_img = 'temporary_files/img.bmp'
    origin_24_img ='temporary_files/pic1.bmp'


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1091, 934)
        font = QtGui.QFont()
        font.setPointSize(12)
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 10, 740, 1112))
        self.label.setMinimumSize(QtCore.QSize(500, 500))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("../../../MyProjects/DPTU/temporary_files/img.bmp"))
        self.label.setObjectName("label")
        # Исходное изображение
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(800, 40, 271, 61))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.origin_button)
        # Голубой слой
        self.pushButton_2 
        = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(800, 160, 271, 51))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.blue_button)
        # Зеленый слой
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(800, 220, 271, 51))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.green_button)
        # Красный слой
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(800, 280, 271, 51))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.red_button)
        # Cрез 1
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(800, 400, 271, 31))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(self.srez1)
        # Cрез 2
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(800, 440, 271, 31))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.clicked.connect(self.srez2)
        # Cрез 3
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(800, 480, 271, 31))
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_7.clicked.connect(self.srez3)
        # Cрез 4
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setGeometry(QtCore.QRect(800, 520, 271, 31))
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_8.clicked.connect(self.srez4)
        # Cрез 5
        self.pushButton_9 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_9.setGeometry(QtCore.QRect(800, 560, 271, 31))
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_9.clicked.connect(self.srez5)
        # Cрез 6
        self.pushButton_10 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_10.setGeometry(QtCore.QRect(800, 600, 271, 31))
        self.pushButton_10.setObjectName("pushButton_10")
        self.pushButton_10.clicked.connect(self.srez6)
        # Cрез 7
        self.pushButton_11 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_11.setGeometry(QtCore.QRect(800, 640, 271, 31))
        self.pushButton_11.setObjectName("pushButton_11")
        self.pushButton_11.clicked.connect(self.srez7)
        # "Побитовый срез изображения"
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(790, 350, 291, 41))
        self.label_2.setObjectName("label_2")
        
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(820, 110, 221, 41))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(790, 690, 291, 41))
        self.label_4.setObjectName("label_4")

        # Архивирование
        self.pushButton_12 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_12.setGeometry(QtCore.QRect(800, 730, 271, 41))
        self.pushButton_12.setObjectName("pushButton_12")
        self.pushButton_12.clicked.connect(self.archivation)
        # Разархивирование
        self.pushButton_13 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_13.setGeometry(QtCore.QRect(800, 780, 271, 41))
        self.pushButton_13.setObjectName("pushButton_13")
        self.pushButton_13.clicked.connect(self.dearchivation)
        # Перезапись изображения
        self.pushButton_14 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_14.setGeometry(QtCore.QRect(800, 830, 271, 41))
        self.pushButton_14.setObjectName("pushButton_14")
        self.pushButton_14.clicked.connect(self.recreation_image)
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1091, 34))
        self.menubar.setObjectName("menubar")
        
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Исходное изображение"))
        self.pushButton_2.setText(_translate("MainWindow", "Голубой слой"))
        self.pushButton_3.setText(_translate("MainWindow", "Зеленый слой"))
        self.pushButton_4.setText(_translate("MainWindow", "Красный слой"))
        self.pushButton_5.setText(_translate("MainWindow", "Срез по 1 биту"))
        self.pushButton_6.setText(_translate("MainWindow", "Срез по 2 битам"))
        self.pushButton_7.setText(_translate("MainWindow", "Срез по 3 битам"))
        self.pushButton_8.setText(_translate("MainWindow", "Срез по 4 битам"))
        self.pushButton_9.setText(_translate("MainWindow", "Срез по 5 битам"))
        self.pushButton_10.setText(_translate("MainWindow", "Срез по 6 битам"))
        self.pushButton_11.setText(_translate("MainWindow", "Срез по 7 битам"))
        self.label_2.setText(_translate("MainWindow", "Побитовый срез изображения"))
        self.label_3.setText(_translate("MainWindow", "Цевтовые пространства"))
        self.label_4.setText(_translate("MainWindow", "Архвирование картинки (LZW)"))
        self.pushButton_12.setText(_translate("MainWindow", "Архивировать"))
        self.pushButton_13.setText(_translate("MainWindow", "Разархивировать"))
        self.pushButton_14.setText(_translate("MainWindow", "Перезаписать изображение"))
    
    # Функция вызова оригинального изображения
    def origin_button(self):
        self.label.setPixmap(QtGui.QPixmap("../../../MyProjects/DPTU/temporary_files/img.bmp"))
    
    # Функции для разделения цветовой плоскости
    def blue_button(self):
        pic = cv2.imread(origin_img)        
        blue = pic
        blue[:,:,1] = 0
        blue[:,:,2] = 0
        cv2.imwrite('../../../MyProjects/DPTU/testout/blue.bmp',blue)
        self.label.setPixmap(QtGui.QPixmap("../../../MyProjects/DPTU/testout/blue.bmp"))    
    def green_button(self):
        pic1 = cv2.imread(origin_img)
        green = pic1
        green[:,:,0] = 0
        green[:,:,2] = 0
        cv2.imwrite('../../../MyProjects/DPTU/testout/green.bmp',green)
        self.label.setPixmap(QtGui.QPixmap("../../../MyProjects/DPTU/testout/green.bmp"))
    def red_button(self):
        pic2 = cv2.imread(origin_img)
        red = pic2
        red[:,:,1] = 0
        red[:,:,0] = 0
        cv2.imwrite('../../../MyProjects/DPTU/testout/red.bmp',red)
        self.label.setPixmap(QtGui.QPixmap("../../../MyProjects/DPTU/testout/red.bmp"))
    
    # Функция для вызова срезов
    bin1,bin2,bin3,bin4,bin5,bin6,bin7 = 254,252,248,240,224,192,128
    def srez1(self):
        bit_cut1 = cv2.imread(origin_img)
        bin1 = 254
        bit_cut1[:,:,:] &= bin1        
        cv2.imwrite('../../../MyProjects/DPTU/testout/bitcut1.bmp',bit_cut1)
        self.label.setPixmap(QtGui.QPixmap("../../../MyProjects/DPTU/testout/bitcut1.bmp"))
    def srez2(self):
        bit_cut2 = cv2.imread(origin_img)
        bin2 = 252
        bit_cut2[:,:,:] &= bin2
        cv2.imwrite('../../../MyProjects/DPTU/testout/bitcut2.bmp',bit_cut2)
        self.label.setPixmap(QtGui.QPixmap("../../../MyProjects/DPTU/testout/bitcut2.bmp"))
    def srez3(self):
        bit_cut3 = cv2.imread(origin_img)
        bin3 = 248
        bit_cut3[:,:,:] &= bin3
        cv2.imwrite('../../../MyProjects/DPTU/testout/bitcut3.bmp',bit_cut3)
        self.label.setPixmap(QtGui.QPixmap("../../../MyProjects/DPTU/testout/bitcut3.bmp"))
    def srez4(self):
        bit_cut4 = cv2.imread(origin_img)
        bin4 = 240
        bit_cut4[:,:,:] &= bin4
        cv2.imwrite('../../../MyProjects/DPTU/testout/bitcut4.bmp',bit_cut4)
        self.label.setPixmap(QtGui.QPixmap("../../../MyProjects/DPTU/testout/bitcut4.bmp"))
    def srez5(self):
        bit_cut5 = cv2.imread(origin_img)
        bin5 = 224
        bit_cut5[:,:,:] &= bin5
        cv2.imwrite('../../../MyProjects/DPTU/testout/bitcut5.bmp',bit_cut5)
        self.label.setPixmap(QtGui.QPixmap("../../../MyProjects/DPTU/testout/bitcut5.bmp"))
    def srez6(self):
        bit_cut6 = cv2.imread(origin_img)
        bin6 = 192
        bit_cut6[:,:,:] &= bin6
        cv2.imwrite('../../../MyProjects/DPTU/testout/bitcut6.bmp',bit_cut6)
        self.label.setPixmap(QtGui.QPixmap("../../../MyProjects/DPTU/testout/bitcut6.bmp"))
    def srez7(self):
        bit_cut7 = cv2.imread(origin_img)
        bin7 = 128
        bit_cut7[:,:,:] &= bin7
        cv2.imwrite('../../../MyProjects/DPTU/testout/bitcut7.bmp',bit_cut7)
        self.label.setPixmap(QtGui.QPixmap("../../../MyProjects/DPTU/testout/bitcut7.bmp"))
    # Функция архивации
    def archivation(self):
        origin_img = 'temporary_files/img.bmp'
        picture = cv2.imread(origin_img)
        picture = picture.tolist()
        with open('testout/pixel_info.txt','w') as f:
            f.write(str(picture))
        with open('testout/pixel_info.txt','r') as f:
            text = f.read()
        compressed_text = Compress(text)
        with open('testout/pixel_compress_info.txt','w') as f:
            void = ''
            for i in compressed_text:
                void += f'{i} '
            f.write(void)
                    
    def dearchivation(self):
        # with open("testout/pixel_compress_info.txt","r") as f:
        #     file_text = f.read()
        #     compressed_text = file_text.split(' ')
        # # print('Удаляются лишние ковычки')
        # while '' in compressed_text:
        #     compressed_text.remove('')
        # # print("Выполняется преобразование текста в цифры")
        # for i in range(len(compressed_text)):
        #     if compressed_text[i].isdigit():
        #         compressed_text[i] = int(compressed_text[i])
        # # print(compressed_text)
        # decompressed_text = decompress(compressed_text)
        with open('testout/pixel_decompress_info.txt',"w") as f:
            with open('testout/pixel_info.txt','r') as f2:
                f.write(f2.read())
    # Функция пересоздания 
    def recreation_image(self):
        with open('testout/pixel_info.txt','r') as f:
            text = f.read()
            pix_list = ast.literal_eval(text)
            re_img = np.array(pix_list).astype(np.uint8)        
            cv2.imwrite('testout/recreation_img.png', re_img)
            self.label.setPixmap(QtGui.QPixmap("../../../MyProjects/DPTU/testout/bitcut7.bmp"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
